<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\lwip_gnu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\lwip_gnu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Mon Jun 27 19:31:26 2016
<BR><P>
<H3>Maximum Stack Usage =       1068 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
recv_callback_tftp &rArr; process_tftp_request &rArr; tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27b3788]">Reset_Handler</a>
 <LI><a href="#[17b9c2c]">NMI_Handler</a>
 <LI><a href="#[17b9ca4]">HardFault_Handler</a>
 <LI><a href="#[17b9c68]">MemManage_Handler</a>
 <LI><a href="#[17b9d58]">BusFault_Handler</a>
 <LI><a href="#[17b9b3c]">UsageFault_Handler</a>
 <LI><a href="#[17b9bb4]">SVC_Handler</a>
 <LI><a href="#[17b9d1c]">DebugMon_Handler</a>
 <LI><a href="#[17b9bf0]">PendSV_Handler</a>
 <LI><a href="#[17b9b78]">SysTick_Handler</a>
 <LI><a href="#[27b2720]">WWDG_IRQHandler</a>
 <LI><a href="#[27b2c84]">PVD_IRQHandler</a>
 <LI><a href="#[27b2ae0]">TAMPER_IRQHandler</a>
 <LI><a href="#[27b2bd0]">RTC_IRQHandler</a>
 <LI><a href="#[27b2e28]">FLASH_IRQHandler</a>
 <LI><a href="#[27b2c48]">RCC_IRQHandler</a>
 <LI><a href="#[27b2fcc]">EXTI0_IRQHandler</a>
 <LI><a href="#[27b2f54]">EXTI1_IRQHandler</a>
 <LI><a href="#[27b2f18]">EXTI2_IRQHandler</a>
 <LI><a href="#[27b2edc]">EXTI3_IRQHandler</a>
 <LI><a href="#[27b2ea0]">EXTI4_IRQHandler</a>
 <LI><a href="#[27b3314]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[27b32d8]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[27b329c]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[27b3260]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[27b3224]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[27b31e8]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[27b31ac]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[27b3530]">ADC1_2_IRQHandler</a>
 <LI><a href="#[27b3440]">CAN1_TX_IRQHandler</a>
 <LI><a href="#[27b34f4]">CAN1_RX0_IRQHandler</a>
 <LI><a href="#[27b34b8]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[27b347c]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[27b2e64]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[27b2aa4]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[27b29f0]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[27b2a2c]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[27b2a68]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[17bd958]">TIM2_IRQHandler</a>
 <LI><a href="#[27b2978]">TIM3_IRQHandler</a>
 <LI><a href="#[27b293c]">TIM4_IRQHandler</a>
 <LI><a href="#[27b2db0]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[27b2dec]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[27b2d38]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[27b2d74]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[27b2b94]">SPI1_IRQHandler</a>
 <LI><a href="#[27b2b58]">SPI2_IRQHandler</a>
 <LI><a href="#[27b27d4]">USART1_IRQHandler</a>
 <LI><a href="#[27b2798]">USART2_IRQHandler</a>
 <LI><a href="#[27b275c]">USART3_IRQHandler</a>
 <LI><a href="#[27b2f90]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[27b2c0c]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[27b2cc0]">OTG_FS_WKUP_IRQHandler</a>
 <LI><a href="#[27b2900]">TIM5_IRQHandler</a>
 <LI><a href="#[27b2b1c]">SPI3_IRQHandler</a>
 <LI><a href="#[27b284c]">UART4_IRQHandler</a>
 <LI><a href="#[27b2810]">UART5_IRQHandler</a>
 <LI><a href="#[27b28c4]">TIM6_IRQHandler</a>
 <LI><a href="#[27b2888]">TIM7_IRQHandler</a>
 <LI><a href="#[27b3170]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[27b3134]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[27b30f8]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[27b30bc]">DMA2_Channel4_IRQHandler</a>
 <LI><a href="#[27b3080]">DMA2_Channel5_IRQHandler</a>
 <LI><a href="#[17b9ce0]">ETH_IRQHandler</a>
 <LI><a href="#[27b3008]">ETH_WKUP_IRQHandler</a>
 <LI><a href="#[27b3350]">CAN2_TX_IRQHandler</a>
 <LI><a href="#[27b3404]">CAN2_RX0_IRQHandler</a>
 <LI><a href="#[27b33c8]">CAN2_RX1_IRQHandler</a>
 <LI><a href="#[27b338c]">CAN2_SCE_IRQHandler</a>
 <LI><a href="#[27b2cfc]">OTG_FS_IRQHandler</a>
 <LI><a href="#[17bd8e0]">main</a>
 <LI><a href="#[28d58fc]">__main</a>
 <LI><a href="#[17bb234]">ethernet_input</a>
 <LI><a href="#[17bb1f8]">ethernetif_init</a>
 <LI><a href="#[17b6914]">Tcp_recv</a>
 <LI><a href="#[17b7454]">conn_err</a>
 <LI><a href="#[28cf0ec]">_sputc</a>
 <LI><a href="#[27b5e70]">etharp_output</a>
 <LI><a href="#[27b4cdc]">low_level_output</a>
 <LI><a href="#[285a4ec]">http_recv</a>
 <LI><a href="#[285a654]">http_err</a>
 <LI><a href="#[285a528]">http_poll</a>
 <LI><a href="#[285a438]">http_sent</a>
 <LI><a href="#[285a528]">http_poll</a>
 <LI><a href="#[285a780]">http_accept</a>
 <LI><a href="#[26acdc8]">ipfrag_free_pbuf_custom</a>
 <LI><a href="#[28d5a28]">my_smtp_result_fn</a>
 <LI><a href="#[17b3c50]">netbios_recv</a>
 <LI><a href="#[253d4f0]">recv_callback_tftp</a>
 <LI><a href="#[28d63c4]">smtp_tcp_recv</a>
 <LI><a href="#[28d643c]">smtp_tcp_err</a>
 <LI><a href="#[28d6400]">smtp_tcp_poll</a>
 <LI><a href="#[28d6388]">smtp_tcp_sent</a>
 <LI><a href="#[28d6478]">smtp_tcp_connected</a>
 <LI><a href="#[26b5798]">tcp_recv_null</a>
 <LI><a href="#[17b689c]">tcp_client_connected</a>
 <LI><a href="#[17b6860]">tcp_client_err</a>
 <LI><a href="#[17b67e8]">tcp_client_reciver</a>
 <LI><a href="#[26b60f8]">tcp_accept_null</a>
 <LI><a href="#[17b6950]">Tcp_accept</a>
 <LI><a href="#[253d4f0]">recv_callback_tftp</a>
 <LI><a href="#[253d4f0]">recv_callback_tftp</a>
 <LI><a href="#[253d4b4]">rrq_recv_callback</a>
 <LI><a href="#[253d220]">wrq_recv_callback</a>
 <LI><a href="#[253d4f0]">recv_callback_tftp</a>
 <LI><a href="#[17b67ac]">udp_client_callback</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28d58fc]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[28cae98]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28cad6c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28c8ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28cad30]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[28c8ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28cac40]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[17b9d94]"></a>wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17b9ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[27b3788]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3530]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b34f4]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b34b8]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b347c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3440]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3404]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b33c8]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b338c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3350]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3314]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b32d8]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b329c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3260]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3224]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b31e8]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b31ac]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3170]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3134]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b30f8]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b30bc]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3080]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b3008]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2fcc]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2f90]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2f54]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2f18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2edc]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2ea0]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2e64]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2e28]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2dec]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2db0]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2d74]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2d38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2cfc]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2cc0]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2c84]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2c48]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2c0c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2bd0]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2b94]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2b58]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2b1c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2ae0]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2aa4]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2a68]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2a2c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b29f0]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2978]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b293c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2900]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b28c4]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2888]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b284c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2810]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b27d4]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2798]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b275c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27b2720]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28d562c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b3c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_recv
<LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b66f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getmeminf
<LI><a href="#[17b67ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[17b9a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Eth_Packet
<LI><a href="#[17bd430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSendData
<LI><a href="#[17bd46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureThread
<LI><a href="#[17bd700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
<LI><a href="#[253d040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_data_message
<LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[26ace40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26ace7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2774684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[27746c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[27b4cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[27b4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[27b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[27b617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[27b61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[27b62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[28d6004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_server_addr
<LI><a href="#[28d60f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
<LI><a href="#[28d6568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_rcpt
<LI><a href="#[28d65e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_mail
<LI><a href="#[28d661c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_helo
<LI><a href="#[28d6658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_header
</UL>

<P><STRONG><a name="[28d55f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b0e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[27b0f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFreeEntryinBuf
<LI><a href="#[27b0fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFileinBuf
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d65a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_quit
<LI><a href="#[28d661c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_helo
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
</UL>

<P><STRONG><a name="[28d55b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[28d54c4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28d535c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28d5410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28d6040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_auth
</UL>

<P><STRONG><a name="[28d5488]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28d544c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28d5410]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d54c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[28d53d4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b6158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[26ace7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[285a348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_init
<LI><a href="#[28d60f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail
</UL>

<P><STRONG><a name="[28d5398]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28d535c]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d54c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[28d526c]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b44fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFileString
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
</UL>

<P><STRONG><a name="[28d517c]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285a618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[28d508c]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[253d400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
<LI><a href="#[27744a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[285a294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[28d6004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_server_addr
<LI><a href="#[28d6040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_auth
<LI><a href="#[28d60f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail
<LI><a href="#[28d661c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_helo
<LI><a href="#[28d66d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_login_uname
<LI><a href="#[28d670c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_login_pass
</UL>

<P><STRONG><a name="[28d4f9c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b3c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_recv
<LI><a href="#[2859e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[28d4eac]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
<LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[17bb234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[28d4dbc]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253cfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_errormsg
<LI><a href="#[253d0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_filename
<LI><a href="#[28d6040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_auth
</UL>

<P><STRONG><a name="[28d4ccc]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[285a294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[28cb348]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28c9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[28c96ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[28ca4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[28d6784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_is_response
</UL>

<P><STRONG><a name="[25395e4]"></a>__aeabi_dmul</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28cb1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[25395a8]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28cb1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[2539620]"></a>__aeabi_d2iz</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[28ca6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[28ca934]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[28ca8f8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28cf1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28ca6dc]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2539620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[28cb1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28ca6a0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28ca4c0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28cb348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[28c9548]"></a>_strtoul</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28c8a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[28c96ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28cb348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[28c9458]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[28c9368]"></a>_double_round</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28cb1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28cb1a4]"></a>_double_epilogue</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c8cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28c9368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28ca6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[25395a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25395e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[28c8ef4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28cad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28cad6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28c8eb8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[28c8cd8]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28cb1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28c8c9c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[28c8a80]"></a>_chval</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[28c8594]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28c8558]"></a>__decompress1</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[17b9d58]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2539b84]"></a>DS1820main</STRONG> (Thumb, 726 bytes, Stack size 16 bytes, ds18b20srom.o(i.DS1820main))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = DS1820main &rArr; DS18B20_ReadDesignateTemper &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
<LI><a href="#[2539698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWFirst
<LI><a href="#[25396d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRomAddr
<LI><a href="#[2539878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20_IO
<LI><a href="#[253992c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureThread
</UL>

<P><STRONG><a name="[2539b0c]"></a>DS18B20_ReadBit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ds18b20srom.o(i.DS18B20_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_ReadBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[25397c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write18b20IO
<LI><a href="#[2539800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOout
<LI><a href="#[253983c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOin
<LI><a href="#[25398b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2537f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWReadBit
<LI><a href="#[2539ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadData
</UL>

<P><STRONG><a name="[2539ad0]"></a>DS18B20_ReadData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ds18b20srom.o(i.DS18B20_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_ReadData &rArr; DS18B20_ReadBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[2539a94]"></a>DS18B20_ReadDesignateTemper</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ds18b20srom.o(i.DS18B20_ReadDesignateTemper))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DS18B20_ReadDesignateTemper &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25395a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25395e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2539620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[25398b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[2539968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteData
<LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[2539ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
</UL>

<P><STRONG><a name="[2539a1c]"></a>DS18B20_Reset</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ds18b20srom.o(i.DS18B20_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_Reset &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[25397c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write18b20IO
<LI><a href="#[2539800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOout
<LI><a href="#[253983c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOin
<LI><a href="#[25398b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2537eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWReset
<LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[25399a4]"></a>DS18B20_WriteBit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ds18b20srom.o(i.DS18B20_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_WriteBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25397c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write18b20IO
<LI><a href="#[2539800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOout
<LI><a href="#[25398b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2537e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWWriteBit
<LI><a href="#[2539968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteData
</UL>

<P><STRONG><a name="[2539968]"></a>DS18B20_WriteData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds18b20srom.o(i.DS18B20_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_WriteData &rArr; DS18B20_WriteBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25399a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2537dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWWriteByte
<LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[17b9d1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[253992c]"></a>Delay_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ds18b20srom.o(i.Delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
</UL>

<P><STRONG><a name="[25398b4]"></a>Delay_us</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ds18b20srom.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[25399a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
<LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[2539a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>

<P><STRONG><a name="[17b9b00]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17b9ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[17b8d2c]"></a>ETH_DMAITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[277cf28]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[277ceec]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[27b4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[277ce74]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMARxDescReceiveITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[27b4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[277cdc0]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[277cd0c]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[27b4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[17b8cf0]"></a>ETH_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25d2ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[277ca00]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[27b491c]"></a>ETH_GetCurrentTxBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernetif.o(i.ETH_GetCurrentTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[27b4cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[277c76c]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetDMARxDescFrameLength))
<BR><BR>[Called By]<UL><LI><a href="#[17b9ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[17b9ac4]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, stm32_eth.o(i.ETH_GetRxPktSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_GetRxPktSize
</UL>
<BR>[Calls]<UL><LI><a href="#[277c76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>
<BR>[Called By]<UL><LI><a href="#[17b9ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[17b8cb4]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[17b9ce0]"></a>ETH_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ETH_IRQHandler &rArr; Read_Eth_Packet &rArr; ETH_RxPkt_ChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b9a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Eth_Packet
<LI><a href="#[17b9ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
<LI><a href="#[17b9b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17b8c78]"></a>ETH_Init</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, stm32_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[277bb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[277be0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[277d234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[277c208]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
</UL>

<P><STRONG><a name="[277c0dc]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[277c0a0]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[277be0c]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[17bb324]"></a>ETH_Recive_Poll</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_Recive_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_Recive_Poll &rArr; LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17bb360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[27b48e0]"></a>ETH_RxPkt_ChainMode</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, ethernetif.o(i.ETH_RxPkt_ChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_RxPkt_ChainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17b9a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Eth_Packet
</UL>

<P><STRONG><a name="[17b8c3c]"></a>ETH_SoftwareReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[277bb78]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[277c0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[277c0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[277ca00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[277cdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[277cf28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[27b4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[17b8c00]"></a>ETH_StructInit</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[27b48a4]"></a>ETH_TxPkt_ChainMode</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_TxPkt_ChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ETH_TxPkt_ChainMode &rArr; Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
<LI><a href="#[17bb2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
<LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[277cd0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[277ce74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[277ceec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b4cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[277bb00]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[17b8ed0]"></a>Ethernet_Configuration</STRONG> (Thumb, 130 bytes, Stack size 192 bytes, stm32f107.o(i.Ethernet_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCOConfig
<LI><a href="#[17b8bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ETH_MediaInterfaceConfig
<LI><a href="#[17b8c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[17b8c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[17b8c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[17b8cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[17b8cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[17b8d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
</UL>

<P><STRONG><a name="[17b6734]"></a>FS_Write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, filesystem.o(i.FS_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = FS_Write &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b42a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[17b4574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemClose
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureThread
<LI><a href="#[17bd4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
</UL>

<P><STRONG><a name="[17b4628]"></a>FS_Writehtml</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, filesystem.o(i.FS_Writehtml))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = FS_Writehtml &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[17b44fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFileString
<LI><a href="#[17b4574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemClose
<LI><a href="#[28d4eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureThread
</UL>

<P><STRONG><a name="[17b45b0]"></a>FileSysteWrite</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, filesystem.o(i.FileSysteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = FileSysteWrite &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b42a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[17b4574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemClose
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemThread
</UL>

<P><STRONG><a name="[17b4574]"></a>FileSystemClose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, filesystem.o(i.FileSystemClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FileSystemClose &rArr; file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[17b45b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSysteWrite
<LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
<LI><a href="#[17b6734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
</UL>

<P><STRONG><a name="[17bd8a4]"></a>FileSystemInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, filesystem.o(i.FileSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = FileSystemInit &rArr; Http_File_System_Init &rArr; ls_openDir &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b41f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[17b4448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Http_File_System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bd868]"></a>FileSystemThread</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, filesystem.o(i.FileSystemThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = FileSystemThread &rArr; FileSysteWrite &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b45b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSysteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b44fc]"></a>FindFileString</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, filesystem.o(i.FindFileString))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = FindFileString &rArr; file_read &rArr; file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b42e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[28d526c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
</UL>

<P><STRONG><a name="[17b8e94]"></a>GPIO_Configuration</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, stm32f107.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[17b8b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[17b8bc4]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[17b8b88]"></a>GPIO_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[2539800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOout
<LI><a href="#[253983c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOin
<LI><a href="#[2539878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20_IO
<LI><a href="#[285c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[17b8b4c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[2539788]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>

<P><STRONG><a name="[253974c]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[25397c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write18b20IO
<LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[2539710]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[25397c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write18b20IO
<LI><a href="#[285c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
<LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[25396d4]"></a>GetRomAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ds18b20sech.o(i.GetRomAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
</UL>

<P><STRONG><a name="[17b66f8]"></a>Getmeminf</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, mem.o(i.Getmeminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Getmeminf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[28cee1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
</UL>

<P><STRONG><a name="[17b9ca4]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b9d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17b4448]"></a>Http_File_System_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, httpd.o(i.Http_File_System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Http_File_System_Init &rArr; ls_openDir &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b41f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemInit
</UL>

<P><STRONG><a name="[17bd994]"></a>InitTIM</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, main.o(i.InitTIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitTIM &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17bd4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[17bd520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[17bd55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[17bd5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[17bd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[17bd688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[17bd73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[17bd778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[17bd7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2539878]"></a>Init_DS18B20_IO</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds18b20srom.o(i.Init_DS18B20_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_DS18B20_IO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17b8b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
</UL>

<P><STRONG><a name="[17bd82c]"></a>LwIP_Init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, netconf.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17bb090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[17bb0cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[17bb108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[17bb144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[17bb180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[17bb2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bd7f0]"></a>LwIP_Periodic_Handle</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = LwIP_Periodic_Handle &rArr; TftpTrm250ms &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17bb054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[17bb270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[17bb2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTrm250ms
<LI><a href="#[17bb324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Recive_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bb360]"></a>LwIP_Pkt_Handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Pkt_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17bb1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Recive_Poll
</UL>

<P><STRONG><a name="[17b9c68]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17b9c2c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17b8e58]"></a>NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f107.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[17bd778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[17bd7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[17bd7b4]"></a>NVIC_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd778]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17b8e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17b8b10]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[17b8e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[2539698]"></a>OWFirst</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ds18b20sech.o(i.OWFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OWFirst &rArr; OWSearch &rArr; OWWriteByte &rArr; DS18B20_WriteData &rArr; DS18B20_WriteBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
</UL>

<P><STRONG><a name="[2537f28]"></a>OWReadBit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ds18b20sech.o(i.OWReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OWReadBit &rArr; DS18B20_ReadBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
</UL>

<P><STRONG><a name="[2537eec]"></a>OWReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ds18b20sech.o(i.OWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OWReset &rArr; DS18B20_Reset &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
</UL>

<P><STRONG><a name="[253965c]"></a>OWSearch</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, ds18b20sech.o(i.OWSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OWSearch &rArr; OWWriteByte &rArr; DS18B20_WriteData &rArr; DS18B20_WriteBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2537dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docrc8
<LI><a href="#[2537dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWWriteByte
<LI><a href="#[2537e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWWriteBit
<LI><a href="#[2537eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWReset
<LI><a href="#[2537f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2539698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWFirst
<LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
</UL>

<P><STRONG><a name="[2537e38]"></a>OWWriteBit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ds18b20sech.o(i.OWWriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OWWriteBit &rArr; DS18B20_WriteBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25399a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
</UL>

<P><STRONG><a name="[2537dfc]"></a>OWWriteByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ds18b20sech.o(i.OWWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OWWriteByte &rArr; DS18B20_WriteData &rArr; DS18B20_WriteBit &rArr; Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
</UL>

<P><STRONG><a name="[17b9bf0]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17b8ad4]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[25d2ae0]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17b8cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[17bd73c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17b8a98]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[2539800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOout
<LI><a href="#[253983c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set18b20IOin
<LI><a href="#[2539878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20_IO
<LI><a href="#[285c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[17b8a5c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b8c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[17b8a20]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_MCOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[17b9a88]"></a>Read_Eth_Packet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ethernetif.o(i.Read_Eth_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read_Eth_Packet &rArr; ETH_RxPkt_ChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[27b48e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RxPkt_ChainMode
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b9ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[25cb22c]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[285c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[25cb04c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[285c904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[25caf98]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[285c904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[25caf5c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[285c904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[25caf20]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[285c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[17b9bb4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17bd700]"></a>SendDataToSever</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, client_tcpudp.o(i.SendDataToSever))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = SendDataToSever &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253983c]"></a>Set18b20IOin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds18b20srom.o(i.Set18b20IOin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set18b20IOin &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17b8b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>

<P><STRONG><a name="[2539800]"></a>Set18b20IOout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds18b20srom.o(i.Set18b20IOout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set18b20IOout &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17b8b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25399a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
<LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>

<P><STRONG><a name="[17bb2e8]"></a>Set_MAC_Address</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ethernetif.o(i.Set_MAC_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_MAC_Address &rArr; ETH_MACAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[277c208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
</UL>

<P><STRONG><a name="[17b9b78]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17bd91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17b89e4]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[27b3e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[17bd6c4]"></a>System_Setup</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32f107.o(i.System_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = System_Setup &rArr; Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b89e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[17b8a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[17b8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17b8ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[17b8e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[17b8e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[17b8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
<LI><a href="#[17b9128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[17bd73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bd958]"></a>TIM2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17bd598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[17bd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[17bd64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17bd688]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd64c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17bd958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[17bd610]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17bd958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd5d4]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd598]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[17bd55c]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd520]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd4e4]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>

<P><STRONG><a name="[17bd4a8]"></a>TcpTestThread</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, client_tcpudp.o(i.TcpTestThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = TcpTestThread &rArr; FS_Write &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[17b6770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[17b68d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b6950]"></a>Tcp_accept</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, client_tcpudp.o(i.Tcp_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tcp_accept
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[17b6374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_sever_test)
</UL>
<P><STRONG><a name="[17b6914]"></a>Tcp_recv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, client_tcpudp.o(i.Tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = Tcp_recv &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.Tcp_accept)
</UL>
<P><STRONG><a name="[17bd46c]"></a>TemperatureThread</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, ds18b20srom.o(i.TemperatureThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = TemperatureThread &rArr; my_smtp_test &rArr; smtp_send_mail &rArr; smtp_send_mail_alloced &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
<LI><a href="#[17b6734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[17bd3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_smtp_test
<LI><a href="#[2539b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1820main
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bb2ac]"></a>TftpTrm250ms</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tftpserver.o(i.TftpTrm250ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = TftpTrm250ms &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[17bd91c]"></a>Time_Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[17b9b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17bd430]"></a>UDPSendData</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, client_tcpudp.o(i.UDPSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = UDPSendData &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b60e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b9b3c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25397c4]"></a>Write18b20IO</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ds18b20srom.o(i.Write18b20IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Write18b20IO
</UL>
<BR>[Calls]<UL><LI><a href="#[2539710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[253974c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25399a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
<LI><a href="#[2539a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[2539b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>

<P><STRONG><a name="[28cee94]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28cf0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[28cf1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28cee58]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[28cee1c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b66f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getmeminf
</UL>

<P><STRONG><a name="[28c96ec]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[28c9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[28cb348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[28c96b0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[28c86fc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28c86c0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28c8684]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[27b1064]"></a>dir_addCluster</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, dir.o(i.dir_addCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dir_addCluster &rArr; fat_allocClusterChain &rArr; fs_getLastCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initClusterChain
<LI><a href="#[27b0b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getLastCluster
<LI><a href="#[27b0bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
<LI><a href="#[27b0ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_DiscToLogicCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
</UL>

<P><STRONG><a name="[27b1028]"></a>dir_createDefaultEntry</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dir.o(i.dir_createDefaultEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dir_createDefaultEntry &rArr; memCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27b0fec]"></a>dir_createDirectoryEntry</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dir.o(i.dir_createDirectoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_createDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27b0fb0]"></a>dir_findFileinBuf</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, dir.o(i.dir_findFileinBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_findFileinBuf &rArr; strMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strMatch
<LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>

<P><STRONG><a name="[27b0f74]"></a>dir_findFreeEntryinBuf</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, dir.o(i.dir_findFreeEntryinBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dir_findFreeEntryinBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>

<P><STRONG><a name="[27b0f38]"></a>dir_findinBuf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dir.o(i.dir_findinBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_findinBuf &rArr; dir_findFileinBuf &rArr; strMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFreeEntryinBuf
<LI><a href="#[27b0fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFileinBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[27b0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
</UL>

<P><STRONG><a name="[27b0efc]"></a>dir_findinCluster</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, dir.o(i.dir_findinCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_findinCluster &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
<LI><a href="#[27b0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
</UL>

<P><STRONG><a name="[27b0ec0]"></a>dir_findinDir</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, dir.o(i.dir_findinDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
<LI><a href="#[27b0e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[27b0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
<LI><a href="#[27ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
</UL>

<P><STRONG><a name="[27b0e84]"></a>dir_findinRootArea</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, dir.o(i.dir_findinRootArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_findinRootArea &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
</UL>

<P><STRONG><a name="[27b0e48]"></a>dir_getFatFileName</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dir.o(i.dir_getFatFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dir_getFatFileName &rArr; file_normalToFatName
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[27b0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[27b0c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_normalToFatName
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[27ac384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
</UL>

<P><STRONG><a name="[27b0e0c]"></a>dir_getFileStructure</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dir.o(i.dir_getFileStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_getFileStructure &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27b0dd0]"></a>dir_setFileSize</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dir.o(i.dir_setFileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_setFileSize &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[27b0d94]"></a>dir_setFirstCluster</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dir.o(i.dir_setFirstCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_setFirstCluster &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27b0d58]"></a>dir_updateDirectoryEntry</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dir.o(i.dir_updateDirectoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[27b0434]"></a>disc_initDisc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, disc.o(i.disc_initDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disc_initDisc &rArr; disc_loadMBR &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b03f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
</UL>
<BR>[Called By]<UL><LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[27b03f8]"></a>disc_loadMBR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, disc.o(i.disc_loadMBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = disc_loadMBR &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[27b03bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getPartitionField
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_initDisc
</UL>

<P><STRONG><a name="[2537dc0]"></a>docrc8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds18b20sech.o(i.docrc8))
<BR><BR>[Called By]<UL><LI><a href="#[253965c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OWSearch
</UL>

<P><STRONG><a name="[17b440c]"></a>efs_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, efs.o(i.efs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = efs_init &rArr; fs_initFs &rArr; fs_loadVolumeId &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27afe1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_initPartition
<LI><a href="#[27afe58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_init
<LI><a href="#[27afe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
<LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
<LI><a href="#[27b0434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_initDisc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Http_File_System_Init
<LI><a href="#[17bd8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemInit
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27b5e70]"></a>etharp_output</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[27b61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[27b5e34]"></a>etharp_query</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[27744e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[27746c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[27764fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[27b617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[27b626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[27b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[27764fc]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27b61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[17bb270]"></a>etharp_tmr</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27b6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[17bb234]"></a>ethernet_input</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[27b62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[28d4eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[17bb1f8]"></a>ethernetif_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; ETH_DMATxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[27b4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[17bb1bc]"></a>ethernetif_input</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27b4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>

<P><STRONG><a name="[27b03bc]"></a>ex_getPartitionField</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, extract.o(i.ex_getPartitionField))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ex_getPartitionField
</UL>
<BR>[Calls]<UL><LI><a href="#[27af354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb32
</UL>
<BR>[Called By]<UL><LI><a href="#[27b03f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
</UL>

<P><STRONG><a name="[27af390]"></a>ex_getb16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, extract.o(i.ex_getb16))
<BR><BR>[Called By]<UL><LI><a href="#[27a9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[27a9e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
</UL>

<P><STRONG><a name="[27af354]"></a>ex_getb32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, extract.o(i.ex_getb32))
<BR><BR>[Called By]<UL><LI><a href="#[27a9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[27b03bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getPartitionField
</UL>

<P><STRONG><a name="[27b0ce0]"></a>fat_DiscToLogicCluster</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, fat.o(i.fat_DiscToLogicCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_DiscToLogicCluster &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[27b0ca4]"></a>fat_LogicToDiscCluster</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fat.o(i.fat_LogicToDiscCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[27adbe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_countClustersInChain
<LI><a href="#[27b0ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_DiscToLogicCluster
<LI><a href="#[27b0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
<LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[27b0c68]"></a>fat_allocClusterChain</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, fat.o(i.fat_allocClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_allocClusterChain &rArr; fs_getLastCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ad9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[27ada7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_giveEocMarker
<LI><a href="#[27adab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[27adb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getLastCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[27adbe4]"></a>fat_countClustersInChain</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, fat.o(i.fat_countClustersInChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_requiredCluster
</UL>

<P><STRONG><a name="[27adb6c]"></a>fat_getNextClusterAddress</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fat.o(i.fat_getNextClusterAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fat_getNextClusterAddress &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getNextFreeCluster
</UL>

<P><STRONG><a name="[27adb30]"></a>fat_getNextClusterAddressWBuf</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, fat.o(i.fat_getNextClusterAddressWBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[27adaf4]"></a>fat_getNextClusterChain</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fat.o(i.fat_getNextClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ada40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isEocMarker
<LI><a href="#[27adab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[27adb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getLastCluster
<LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>

<P><STRONG><a name="[27adab8]"></a>fat_getSectorAddressFatEntry</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fat.o(i.fat_getSectorAddressFatEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_getSectorAddressFatEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[27ad9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[27ada04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[27adb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[27adb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[27ada7c]"></a>fat_giveEocMarker</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fat.o(i.fat_giveEocMarker))
<BR><BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[27ada40]"></a>fat_isEocMarker</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fat.o(i.fat_isEocMarker))
<BR><BR>[Called By]<UL><LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
</UL>

<P><STRONG><a name="[27ada04]"></a>fat_setNextClusterAddress</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, fat.o(i.fat_setNextClusterAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fat_setNextClusterAddress &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27ad9c8]"></a>fat_setNextClusterAddressWBuf</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, fat.o(i.fat_setNextClusterAddressWBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fat_setNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[17b43d0]"></a>file_fclose</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, file.o(i.file_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_hasTimeSupport
<LI><a href="#[27ac474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_setAttr
<LI><a href="#[27ac528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_getAttr
<LI><a href="#[27b0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[27b0d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[27b0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemClose
<LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[17b4394]"></a>file_fopen</STRONG> (Thumb, 634 bytes, Stack size 80 bytes, file.o(i.file_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_setFirstClusterInDirEntry
<LI><a href="#[27ac30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_giveFreeClusterHint
<LI><a href="#[27ac348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getNextFreeCluster
<LI><a href="#[27ac384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
<LI><a href="#[27ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[27ac438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_setpos
<LI><a href="#[27ac474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_setAttr
<LI><a href="#[27ac4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_initFile
<LI><a href="#[27ada04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[27ada7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_giveEocMarker
<LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[27b0b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initClusterChain
<LI><a href="#[27b0d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFirstCluster
<LI><a href="#[27b0e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[27b0e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[27b0fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
<LI><a href="#[27b1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDefaultEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[17b45b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSysteWrite
<LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
<LI><a href="#[17b6734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[285a618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[17b4358]"></a>file_fread</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, file.o(i.file_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorRead
<LI><a href="#[27ac528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_getAttr
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[27b0bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
<LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[17b42e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
</UL>

<P><STRONG><a name="[17b431c]"></a>file_fwrite</STRONG> (Thumb, 352 bytes, Stack size 80 bytes, file.o(i.file_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = file_fwrite &rArr; file_requiredCluster &rArr; fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorWrite
<LI><a href="#[27ac4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_requiredCluster
<LI><a href="#[27ac528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_getAttr
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[27b0bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[27b0ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
<LI><a href="#[27b0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
</UL>
<BR>[Called By]<UL><LI><a href="#[17b42a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[17b4628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Writehtml
</UL>

<P><STRONG><a name="[27ac528]"></a>file_getAttr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, file.o(i.file_getAttr))
<BR><BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[27ac4ec]"></a>file_initFile</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, file.o(i.file_initFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = file_initFile
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27b0c2c]"></a>file_normalToFatName</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, file.o(i.file_normalToFatName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = file_normalToFatName
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_validateChar
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[27b0e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
</UL>

<P><STRONG><a name="[17b42e0]"></a>file_read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file.o(i.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = file_read &rArr; file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
</UL>
<BR>[Called By]<UL><LI><a href="#[17b44fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFileString
<LI><a href="#[253d25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
<LI><a href="#[285a30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
</UL>

<P><STRONG><a name="[27ac4b0]"></a>file_requiredCluster</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, file.o(i.file_requiredCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = file_requiredCluster &rArr; fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adbe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_countClustersInChain
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>

<P><STRONG><a name="[27ac474]"></a>file_setAttr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, file.o(i.file_setAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = file_setAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[27ac438]"></a>file_setpos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, file.o(i.file_setpos))
<BR><BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27ac3fc]"></a>file_validateChar</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, file.o(i.file_validateChar))
<BR><BR>[Called By]<UL><LI><a href="#[27b0c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_normalToFatName
</UL>

<P><STRONG><a name="[17b42a4]"></a>file_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file.o(i.file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = file_write &rArr; file_fwrite &rArr; file_requiredCluster &rArr; fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17b45b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSysteWrite
<LI><a href="#[17b6734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[253d220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
</UL>

<P><STRONG><a name="[2859e98]"></a>fs_bytes_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_lwip.o(i.fs_bytes_left))
<BR><BR>[Called By]<UL><LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
<LI><a href="#[285a744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_check_eof
</UL>

<P><STRONG><a name="[27b0bf0]"></a>fs_clearCluster</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs.o(i.fs_clearCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fs_clearCluster &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[27b0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[27b0bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
</UL>
<BR>[Called By]<UL><LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2859e5c]"></a>fs_close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_lwip.o(i.fs_close))
<BR><BR>[Called By]<UL><LI><a href="#[285a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_eof
</UL>

<P><STRONG><a name="[27b0bb4]"></a>fs_clusterToSector</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs.o(i.fs_clusterToSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_clusterToSector
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[27b0bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[27b0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
</UL>

<P><STRONG><a name="[27a9fa8]"></a>fs_countDataSectors</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, fs.o(i.fs_countDataSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_countDataSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[27a9f6c]"></a>fs_determineFatType</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fs.o(i.fs_determineFatType))
<BR><BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[27ac3c0]"></a>fs_findFile</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, fs.o(i.fs_findFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27a9eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getFirstClusterRootDir
<LI><a href="#[27b0c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_normalToFatName
<LI><a href="#[27b0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
</UL>
<BR>[Called By]<UL><LI><a href="#[17b41f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[27ac384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
</UL>

<P><STRONG><a name="[27a9f30]"></a>fs_findFirstSectorRootDir</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs.o(i.fs_findFirstSectorRootDir))
<BR><BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[27ac384]"></a>fs_findFreeFile</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, fs.o(i.fs_findFreeFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[27b0e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[27b0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
<LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27a9ef4]"></a>fs_flushFs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs.o(i.fs_flushFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fs_flushFs &rArr; part_flushPart &rArr; ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27a9cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flushPart
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
</UL>

<P><STRONG><a name="[27a9eb8]"></a>fs_getFirstClusterRootDir</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs.o(i.fs_getFirstClusterRootDir))
<BR><BR>[Called By]<UL><LI><a href="#[27a9e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initCurrentDir
<LI><a href="#[27ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
</UL>

<P><STRONG><a name="[27b0b78]"></a>fs_getLastCluster</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs.o(i.fs_getLastCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fs_getLastCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[27ac348]"></a>fs_getNextFreeCluster</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fs.o(i.fs_getNextFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fs_getNextFreeCluster &rArr; fat_getNextClusterAddress &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27adb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27ac30c]"></a>fs_giveFreeClusterHint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs.o(i.fs_giveFreeClusterHint))
<BR><BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[27ac2d0]"></a>fs_hasTimeSupport</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(i.fs_hasTimeSupport))
<BR><BR>[Called By]<UL><LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[27b0b3c]"></a>fs_initClusterChain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs.o(i.fs_initClusterChain))
<BR><BR>[Called By]<UL><LI><a href="#[17b41f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[27b1064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[27a9e40]"></a>fs_initCurrentDir</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fs.o(i.fs_initCurrentDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fs_initCurrentDir
</UL>
<BR>[Calls]<UL><LI><a href="#[27a9eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getFirstClusterRootDir
</UL>
<BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[27afed0]"></a>fs_initFs</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs.o(i.fs_initFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fs_initFs &rArr; fs_loadVolumeId &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27a9d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_verifySanity
<LI><a href="#[27a9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[27a9e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
<LI><a href="#[27a9e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initCurrentDir
<LI><a href="#[27a9f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFirstSectorRootDir
<LI><a href="#[27a9f6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_determineFatType
<LI><a href="#[27a9fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_countDataSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[27a9e04]"></a>fs_isValidFat</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs.o(i.fs_isValidFat))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fs_isValidFat &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27af390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb16
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[27a9dc8]"></a>fs_loadVolumeId</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fs.o(i.fs_loadVolumeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fs_loadVolumeId &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27af354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb32
<LI><a href="#[27af390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb16
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2859e20]"></a>fs_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_lwip.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d4f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[285a5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_404_file
</UL>

<P><STRONG><a name="[27ac294]"></a>fs_setFirstClusterInDirEntry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs.o(i.fs_setFirstClusterInDirEntry))
<BR><BR>[Called By]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[17b4268]"></a>fs_umount</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fs.o(i.fs_umount))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fs_umount &rArr; fs_flushFs &rArr; part_flushPart &rArr; ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27a9ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flushFs
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemClose
<LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[27a9d14]"></a>fs_verifySanity</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, fs.o(i.fs_verifySanity))
<BR><BR>[Called By]<UL><LI><a href="#[27afed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[285d804]"></a>get_spi_BaudRatePrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd.o(i.get_spi_BaudRatePrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[285d624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
</UL>

<P><STRONG><a name="[17bd3f4]"></a>httpd_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, httpd.o(i.httpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = httpd_init &rArr; httpd_init_addr &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26b13a0]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[26b0a04]"></a>icmp_input</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[26b0950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[26b098c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[26b9e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[27746c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[26b09c8]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[26ace40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[27afe94]"></a>if_initInterface</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sd_stm32.o(i.if_initInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = if_initInterface &rArr; sd_getDriveSize &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
<LI><a href="#[285d624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[285d660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
<LI><a href="#[285d750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2862ebc]"></a>if_readBuf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sd_stm32.o(i.if_readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2863060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_readSector
</UL>

<P><STRONG><a name="[285c79c]"></a>if_spiInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_stm32.o(i.if_spiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = if_spiInit &rArr; SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2539710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[285c904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[285c940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[27afe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[285d534]"></a>if_spiSend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sd_stm32.o(i.if_spiSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2539710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[253974c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25caf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[25caf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[25cb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[285d5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
<LI><a href="#[285d5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[285d624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[285d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[285d714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp16b
<LI><a href="#[285d78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command_crc
<LI><a href="#[285d7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>

<P><STRONG><a name="[2862e80]"></a>if_writeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sd_stm32.o(i.if_writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2862ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_writeSector
</UL>

<P><STRONG><a name="[26b098c]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[26afc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[26b0950]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[26afc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[26b4334]"></a>inet_chksum_pseudo</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26afc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b557c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[2863588]"></a>ioman_decUseCnt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ioman.o(i.ioman_decUseCnt))
<BR><BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[286354c]"></a>ioman_directSectorRead</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ioman.o(i.ioman_directSectorRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ioman_directSectorRead &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[2863060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_readSector
<LI><a href="#[286309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[286327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[286345c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[28634d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorRead
</UL>

<P><STRONG><a name="[2863510]"></a>ioman_directSectorWrite</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ioman.o(i.ioman_directSectorWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ioman_directSectorWrite &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[2862ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_writeSector
<LI><a href="#[2862f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2862fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_resetCacheItem
<LI><a href="#[286327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[286345c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[28634d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
</UL>
<BR>[Called By]<UL><LI><a href="#[27ac21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorWrite
</UL>

<P><STRONG><a name="[28634d4]"></a>ioman_findFreeSpot</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ioman.o(i.ioman_findFreeSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ioman_findFreeSpot &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[2863498]"></a>ioman_findOverallocableSpot</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ioman.o(i.ioman_findOverallocableSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioman_findOverallocableSpot &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2863240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getRefCnt
<LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[286345c]"></a>ioman_findSectorInCache</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ioman.o(i.ioman_findSectorInCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ioman_findSectorInCache &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[2863420]"></a>ioman_findUnusedSpot</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ioman.o(i.ioman_findUnusedSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioman_findUnusedSpot &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2863204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getUseCnt
<LI><a href="#[2863240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getRefCnt
<LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[28633a8]"></a>ioman_flushRange</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ioman.o(i.ioman_flushRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2862f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
<LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
</UL>
<BR>[Called By]<UL><LI><a href="#[27a9cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flushPart
</UL>

<P><STRONG><a name="[286336c]"></a>ioman_flushSector</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ioman.o(i.ioman_flushSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2862ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_writeSector
<LI><a href="#[2862f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[286327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[28633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
</UL>

<P><STRONG><a name="[2863330]"></a>ioman_getAttr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ioman.o(i.ioman_getAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[28633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
<LI><a href="#[2863420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[286345c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[2863498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findOverallocableSpot
<LI><a href="#[28634d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
</UL>

<P><STRONG><a name="[28632f4]"></a>ioman_getBp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ioman.o(i.ioman_getBp))
<BR><BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[28632b8]"></a>ioman_getBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ioman.o(i.ioman_getBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[27afe58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_init
</UL>

<P><STRONG><a name="[286327c]"></a>ioman_getPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioman.o(i.ioman_getPtr))
<BR><BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[286309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[2863240]"></a>ioman_getRefCnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioman.o(i.ioman_getRefCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2863420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[2863498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findOverallocableSpot
</UL>

<P><STRONG><a name="[27b0380]"></a>ioman_getSector</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, ioman.o(i.ioman_getSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2862f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2862fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_resetCacheItem
<LI><a href="#[286309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[28630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_push
<LI><a href="#[286318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_incUseCnt
<LI><a href="#[28631c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_incRefCnt
<LI><a href="#[286327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
<LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2863420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[286345c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[2863498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findOverallocableSpot
<LI><a href="#[28634d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
</UL>
<BR>[Called By]<UL><LI><a href="#[27b03f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>

<P><STRONG><a name="[2863204]"></a>ioman_getUseCnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioman.o(i.ioman_getUseCnt))
<BR><BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[2863420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
</UL>

<P><STRONG><a name="[28631c8]"></a>ioman_incRefCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioman.o(i.ioman_incRefCnt))
<BR><BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[286318c]"></a>ioman_incUseCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioman.o(i.ioman_incUseCnt))
<BR><BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[27afe58]"></a>ioman_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ioman.o(i.ioman_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioman_init &rArr; ioman_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2863024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_reset
<LI><a href="#[28632b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2863150]"></a>ioman_pop</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ioman.o(i.ioman_pop))
<BR><BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[28630d8]"></a>ioman_push</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ioman.o(i.ioman_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ioman_push
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[286309c]"></a>ioman_putSectorInCache</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ioman.o(i.ioman_putSectorInCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2862f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2863060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_readSector
<LI><a href="#[286327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[2863060]"></a>ioman_readSector</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ioman.o(i.ioman_readSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2862ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[286309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[27b0344]"></a>ioman_releaseSector</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ioman.o(i.ioman_releaseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ioman_releaseSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[286309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2863150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_pop
<LI><a href="#[2863204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getUseCnt
<LI><a href="#[28632f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getBp
<LI><a href="#[2863330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
<LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2863588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_decUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[27b03f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
<LI><a href="#[27b0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
</UL>

<P><STRONG><a name="[2863024]"></a>ioman_reset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ioman.o(i.ioman_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ioman_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
</UL>
<BR>[Called By]<UL><LI><a href="#[27afe58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_init
</UL>

<P><STRONG><a name="[2862fe8]"></a>ioman_resetCacheItem</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ioman.o(i.ioman_resetCacheItem))
<BR><BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
</UL>

<P><STRONG><a name="[2862f34]"></a>ioman_setAttr</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ioman.o(i.ioman_setAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ioman_setAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[286309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[28633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
</UL>

<P><STRONG><a name="[2862ef8]"></a>ioman_writeSector</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ioman.o(i.ioman_writeSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2862e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[286336c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
</UL>

<P><STRONG><a name="[26b42f8]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[27b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[26aee20]"></a>ip_frag</STRONG> (Thumb, 438 bytes, Stack size 96 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26acf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[26acf6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[26b098c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[27744e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[27747b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[27747ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b9e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[26aee5c]"></a>ip_input</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26b098c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b13a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26ba040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[277451c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[26b29a8]"></a>ip_output</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b9de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[26b9e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b557c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[26b9e24]"></a>ip_output_if</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[26aede4]"></a>ip_reass</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26ace04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[26ace7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26aceb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[26acef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[26b098c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[27747b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[26b9de8]"></a>ip_route</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[17b60e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b593c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[26adf98]"></a>ipaddr_aton</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, ip_addr.o(i.ipaddr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[17b41f0]"></a>ls_openDir</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ls.o(i.ls_openDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ls_openDir &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27ac3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[27b0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[27b0b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Http_File_System_Init
<LI><a href="#[17bd8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemInit
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[277b344]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[26adf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b557c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>

<P><STRONG><a name="[253bab0]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253d07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_block
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b54c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b9e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[27b61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[27b62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[277b308]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[253ba74]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[253d130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_block
<LI><a href="#[26acef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b4898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b54c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[17bd8e0]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = main &rArr; LwIP_Periodic_Handle &rArr; TftpTrm250ms &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17bd304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_init
<LI><a href="#[17bd340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sever_test
<LI><a href="#[17bd37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_init
<LI><a href="#[17bd3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_smtp_test
<LI><a href="#[17bd3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[17bd430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSendData
<LI><a href="#[17bd46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureThread
<LI><a href="#[17bd4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
<LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[17bd700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[17bd7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[17bd868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemThread
<LI><a href="#[17bd8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystemInit
<LI><a href="#[17bd994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[27b0b00]"></a>memClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, plibc.o(i.memClr))
<BR><BR>[Called By]<UL><LI><a href="#[17b41f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[27b0bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[27b0e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[2863024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_reset
</UL>

<P><STRONG><a name="[27b0ac4]"></a>memCpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, plibc.o(i.memCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[27b0d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[27b0e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[27b0fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
<LI><a href="#[27b1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDefaultEntry
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[253d1e4]"></a>mem_free</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27791fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
<LI><a href="#[285a30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[285a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
<LI><a href="#[28d67c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_free
</UL>

<P><STRONG><a name="[17bb180]"></a>mem_init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, mem.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[253d1a8]"></a>mem_malloc</STRONG> (Thumb, 420 bytes, Stack size 20 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[17bb1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[285a30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[285a3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_alloc
<LI><a href="#[28d60f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail
</UL>

<P><STRONG><a name="[2778f2c]"></a>mem_trim</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[277451c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[277802c]"></a>memp_free</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253cf14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[26aceb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[26acf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[26b5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[17bb144]"></a>memp_init</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2777ff0]"></a>memp_malloc</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[17b6338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[26ace7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26acf6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[28d5a28]"></a>my_smtp_result_fn</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, snmp_app.o(i.my_smtp_result_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_smtp_result_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmp_app.o(i.my_smtp_test)
</UL>
<P><STRONG><a name="[17bd3b8]"></a>my_smtp_test</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, snmp_app.o(i.my_smtp_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = my_smtp_test &rArr; smtp_send_mail &rArr; smtp_send_mail_alloced &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[28d6004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_server_addr
<LI><a href="#[28d6040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_set_auth
<LI><a href="#[28d60f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureThread
<LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bd37c]"></a>netbios_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, netbios.o(i.netbios_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netbios_init &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[17b6158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[17b6194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17bb108]"></a>netif_add</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27766dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[27766dc]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2776574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2776628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2776664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[17bb0cc]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2776664]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[27766dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2776628]"></a>netif_set_ipaddr</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[27766dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2776574]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[27766dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[17bb090]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27764fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[27ac258]"></a>part_directSectorRead</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, partition.o(i.part_directSectorRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = part_directSectorRead &rArr; ioman_directSectorRead &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2860ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
<LI><a href="#[286354c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
</UL>

<P><STRONG><a name="[27ac21c]"></a>part_directSectorWrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, partition.o(i.part_directSectorWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = part_directSectorWrite &rArr; ioman_directSectorWrite &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2860ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
<LI><a href="#[2863510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>

<P><STRONG><a name="[27a9cd8]"></a>part_flushPart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, partition.o(i.part_flushPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = part_flushPart &rArr; ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2860ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
<LI><a href="#[28633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
</UL>
<BR>[Called By]<UL><LI><a href="#[27a9ef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flushFs
</UL>

<P><STRONG><a name="[2860ae0]"></a>part_getRealLBA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, partition.o(i.part_getRealLBA))
<BR><BR>[Called By]<UL><LI><a href="#[27a9cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flushPart
<LI><a href="#[27ac21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorWrite
<LI><a href="#[27ac258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorRead
<LI><a href="#[27b0a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>

<P><STRONG><a name="[27b0a88]"></a>part_getSect</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, partition.o(i.part_getSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[2860ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[27a9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[27a9e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
<LI><a href="#[27ad9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[27ada04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[27adb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[27adb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
<LI><a href="#[27b0bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[27b0d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[27b0d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFirstCluster
<LI><a href="#[27b0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
<LI><a href="#[27b0e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[27b0e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[27b0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
<LI><a href="#[27b0fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
</UL>

<P><STRONG><a name="[27afe1c]"></a>part_initPartition</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, partition.o(i.part_initPartition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = part_initPartition
</UL>
<BR>[Calls]<UL><LI><a href="#[2860aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_isFatPart
</UL>
<BR>[Called By]<UL><LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2860aa4]"></a>part_isFatPart</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, partition.o(i.part_isFatPart))
<BR><BR>[Called By]<UL><LI><a href="#[27afe1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_initPartition
</UL>

<P><STRONG><a name="[27b0a4c]"></a>part_relSect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, partition.o(i.part_relSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = part_relSect &rArr; ioman_releaseSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27b0344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[17b431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[17b4358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[27a9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[27a9e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
<LI><a href="#[27ad9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[27ada04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[27adaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[27adb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[27adb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
<LI><a href="#[27b0bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[27b0c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[27b0d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[27b0d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFirstCluster
<LI><a href="#[27b0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
<LI><a href="#[27b0e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[27b0e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[27b0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
<LI><a href="#[27b0fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
</UL>

<P><STRONG><a name="[17b6590]"></a>pbuf_alloc</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b3c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_recv
<LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b67ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[17bd430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSendData
<LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b2b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[26b2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b55b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[27b4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[27747ec]"></a>pbuf_alloced_custom</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[27747b0]"></a>pbuf_cat</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2774774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[2774774]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[27744e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[27747b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[2774738]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[26ace40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26acef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b55b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[27746c0]"></a>pbuf_copy</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2774684]"></a>pbuf_copy_partial</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
<LI><a href="#[28d6784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_is_response
</UL>

<P><STRONG><a name="[17b6554]"></a>pbuf_free</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b3c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_recv
<LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[17b67ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[17b6914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_recv
<LI><a href="#[17bb1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[17bb234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[17bd430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSendData
<LI><a href="#[253d220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[253d4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
<LI><a href="#[253d4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback_tftp
<LI><a href="#[26acdc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[26ace40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26acef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b0b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b557c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[26b5798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[26b5888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[277451c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[27b61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[27b6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[27b62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[285a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_eof
<LI><a href="#[285a4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d67c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_free
</UL>

<P><STRONG><a name="[277460c]"></a>pbuf_get_at</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[2774594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
<LI><a href="#[28d6748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_is_response_finished
</UL>

<P><STRONG><a name="[27745d0]"></a>pbuf_header</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[26b0a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b1454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b9e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[27b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[2774594]"></a>pbuf_memcmp</STRONG> (Thumb, 120 bytes, Stack size 52 bytes, pbuf.o(i.pbuf_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_memcmp &rArr; pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[277460c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[2774558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[2774558]"></a>pbuf_memfind</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_memfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pbuf_memfind &rArr; pbuf_memcmp &rArr; pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[2774594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27744a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
<LI><a href="#[28d6748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_is_response_finished
</UL>

<P><STRONG><a name="[277451c]"></a>pbuf_realloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2778f2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[27744e0]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2774774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[27744a4]"></a>pbuf_strstr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pbuf_strstr &rArr; pbuf_memfind &rArr; pbuf_memcmp &rArr; pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[2774558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
</UL>

<P><STRONG><a name="[253d52c]"></a>process_tftp_request</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, tftpserver.o(i.process_tftp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = process_tftp_request &rArr; tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b41f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[17b440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[17b6158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[17b6194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[253cf14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[253d0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_filename
<LI><a href="#[253d16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_decode_op
<LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
</UL>
<BR>[Called By]<UL><LI><a href="#[253d4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback_tftp
</UL>

<P><STRONG><a name="[26ba040]"></a>raw_input</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[253d4f0]"></a>recv_callback_tftp</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tftpserver.o(i.recv_callback_tftp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = recv_callback_tftp &rArr; process_tftp_request &rArr; tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>
<BR>[Address Reference Count : 4]<UL><LI> tftpserver.o(i.tftpd_init)
<LI> tftpserver.o(i.process_tftp_request)
<LI> tftpserver.o(i.tftp_cleanup_rd)
<LI> tftpserver.o(i.tftp_cleanup_wr)
</UL>
<P><STRONG><a name="[253d4b4]"></a>rrq_recv_callback</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tftpserver.o(i.rrq_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = rrq_recv_callback &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253d0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_is_correct_ack
<LI><a href="#[253d25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(i.tftp_process_read)
</UL>
<P><STRONG><a name="[285d7c8]"></a>sd_Command</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sd.o(i.sd_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>
<BR>[Called By]<UL><LI><a href="#[285d5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
<LI><a href="#[285d5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[285d624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[285d660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
<LI><a href="#[285d750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[285d78c]"></a>sd_Command_crc</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sd.o(i.sd_Command_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sd_Command_crc &rArr; crc7
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[285de94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc7
</UL>
<BR>[Called By]<UL><LI><a href="#[285d750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[285d750]"></a>sd_Init</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, sd.o(i.sd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sd_Init &rArr; sd_Command_crc &rArr; crc7
</UL>
<BR>[Calls]<UL><LI><a href="#[285d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8bError
<LI><a href="#[285d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[285d78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command_crc
<LI><a href="#[285d7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[27afe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[285d714]"></a>sd_Resp16b</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sd.o(i.sd_Resp16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_Resp16b &rArr; sd_Resp8b &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[285d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
</UL>
<BR>[Called By]<UL><LI><a href="#[285d660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
</UL>

<P><STRONG><a name="[285d6d8]"></a>sd_Resp8b</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd.o(i.sd_Resp8b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_Resp8b &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>
<BR>[Called By]<UL><LI><a href="#[285d5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
<LI><a href="#[285d5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[285d624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[285d714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp16b
<LI><a href="#[285d750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[285d69c]"></a>sd_Resp8bError</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sd.o(i.sd_Resp8bError))
<BR><BR>[Called By]<UL><LI><a href="#[285d5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[285d660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
<LI><a href="#[285d750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[285d660]"></a>sd_State</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sd.o(i.sd_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_State &rArr; sd_Resp16b &rArr; sd_Resp8b &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8bError
<LI><a href="#[285d714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp16b
<LI><a href="#[285d7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[27afe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[285d624]"></a>sd_getDriveSize</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, sd.o(i.sd_getDriveSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sd_getDriveSize &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[285d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[285d7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
<LI><a href="#[285d804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_spi_BaudRatePrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[27afe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[285d5e8]"></a>sd_readSector</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, sd.o(i.sd_readSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[285d69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8bError
<LI><a href="#[285d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[285d7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2862ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_readBuf
</UL>

<P><STRONG><a name="[285d5ac]"></a>sd_writeSector</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sd.o(i.sd_writeSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285d534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[285d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[285d7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2862e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_writeBuf
</UL>

<P><STRONG><a name="[28d60f4]"></a>smtp_send_mail</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, smtp.o(i.smtp_send_mail))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = smtp_send_mail &rArr; smtp_send_mail_alloced &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28d53d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_smtp_test
</UL>

<P><STRONG><a name="[28d6040]"></a>smtp_set_auth</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, smtp.o(i.smtp_set_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smtp_set_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[28d4dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28d54c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_smtp_test
</UL>

<P><STRONG><a name="[28d6004]"></a>smtp_set_server_addr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smtp.o(i.smtp_set_server_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtp_set_server_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_smtp_test
</UL>

<P><STRONG><a name="[27b0a10]"></a>strMatch</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, plibc.o(i.strMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[27b0fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFileinBuf
</UL>

<P><STRONG><a name="[26b5a2c]"></a>tcp_abandon</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b5720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[26b584c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[27764c0]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b6044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[26b6080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2776628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
</UL>

<P><STRONG><a name="[17b6464]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[17bd340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sever_test
<LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
</UL>

<P><STRONG><a name="[26b59f0]"></a>tcp_alloc</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b58c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[26b6044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[26b6080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[28d53d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b62fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[26b59b4]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
<LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d67fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_close
</UL>

<P><STRONG><a name="[17b6428]"></a>tcp_bind</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcp_bind &rArr; tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[26b548c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[26b6008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[17b68d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
<LI><a href="#[17bd340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sever_test
<LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[17b68d8]"></a>tcp_client_callback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, client_tcpudp.o(i.tcp_client_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_client_callback &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[17b62fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[17b6374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[17b6428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
</UL>

<P><STRONG><a name="[17b689c]"></a>tcp_client_connected</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, client_tcpudp.o(i.tcp_client_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_client_connected &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_client_callback)
</UL>
<P><STRONG><a name="[17b6860]"></a>tcp_client_err</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, client_tcpudp.o(i.tcp_client_err))
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_client_callback)
</UL>
<P><STRONG><a name="[17b67e8]"></a>tcp_client_reciver</STRONG> (Thumb, 622 bytes, Stack size 72 bytes, client_tcpudp.o(i.tcp_client_reciver))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_client_reciver &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b6248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b66f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getmeminf
<LI><a href="#[28d4ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[28d4eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_client_callback)
</UL>
<P><STRONG><a name="[17b63ec]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[17b6914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_recv
<LI><a href="#[17bd700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[26b5798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
<LI><a href="#[28d67fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_close
</UL>

<P><STRONG><a name="[17b63b0]"></a>tcp_connect</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b548c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[26b55b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[26b58c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[26b593c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[26b6008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[26b9de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[17b68d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[26b593c]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[26b9de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[26b55b8]"></a>tcp_enqueue_flags</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26b54c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[17b6374]"></a>tcp_err</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[17b68d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
<LI><a href="#[17b6950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_accept
<LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
<LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[26b5900]"></a>tcp_fasttmr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b57d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[26b4370]"></a>tcp_input</STRONG> (Thumb, 1418 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[26b47e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b5798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[26b57d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[26b584c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[26b557c]"></a>tcp_keepalive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[26b2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[17b6338]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_listen_with_backlog &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[26b548c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sever_test
<LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
</UL>

<P><STRONG><a name="[17b62fc]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b68d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
<LI><a href="#[17bd340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sever_test
<LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[26b58c4]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[17b62c0]"></a>tcp_output</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b2b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[17b689c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
<LI><a href="#[17bd700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b47e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26b5540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[26b584c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[26b5900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[285a528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[26b5888]"></a>tcp_pcb_purge</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26b5720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[26b584c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[26b584c]"></a>tcp_pcb_remove</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b5888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[26b5810]"></a>tcp_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
<LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[26b57d4]"></a>tcp_process_refused_data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b5798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b5900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[17b6284]"></a>tcp_recv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[17b68d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
<LI><a href="#[17b6950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_accept
<LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
<LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[26b5798]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b57d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[17b6248]"></a>tcp_recved</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b55f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[26b5798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[285a4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[28d63c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_recv
</UL>

<P><STRONG><a name="[26b42bc]"></a>tcp_rexmit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[26b4280]"></a>tcp_rexmit_fast</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[26b42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[26b5540]"></a>tcp_rexmit_rto</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[26b5504]"></a>tcp_rst</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[26b47e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[26b5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[26b575c]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b5720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[26b5720]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[26b5888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[26b5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[26b4244]"></a>tcp_send_empty_ack</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[26b2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[26b54c8]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b55b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[26b56e4]"></a>tcp_sent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
<LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[26b56a8]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_setprio))
<BR><BR>[Called By]<UL><LI><a href="#[285a2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init_addr
<LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[17bd340]"></a>tcp_sever_test</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, client_tcpudp.o(i.tcp_sever_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_sever_test &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[17b6338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[17b6428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[17b6464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26b5630]"></a>tcp_slowtmr</STRONG> (Thumb, 874 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b5540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[26b557c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[26b5888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[26b548c]"></a>tcp_timer_needed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Called By]<UL><LI><a href="#[17b6338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[17b6428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[26b60bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[17bb054]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[26b5900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[26b55f4]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[17b620c]"></a>tcp_write</STRONG> (Thumb, 1094 bytes, Stack size 112 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b2ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[26b2b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[26b2bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[26b5720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[27747b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b67e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[17b689c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
<LI><a href="#[17bd700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[285a30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[28d64f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_body
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[26b5450]"></a>tcp_zero_window_probe</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[26b2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[2774684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[26b5630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[253d478]"></a>tftp_cleanup_rd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tftpserver.o(i.tftp_cleanup_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tftp_cleanup_rd &rArr; file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[253cf14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[253cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTrm250ms
<LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[253d4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
</UL>

<P><STRONG><a name="[253d43c]"></a>tftp_cleanup_wr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tftpserver.o(i.tftp_cleanup_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tftp_cleanup_wr &rArr; file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
<LI><a href="#[17b43d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[253cf14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[253cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[253d220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
</UL>

<P><STRONG><a name="[253d400]"></a>tftp_construct_error_message</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tftpserver.o(i.tftp_construct_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tftp_construct_error_message &rArr; tftp_set_errormsg
</UL>
<BR>[Calls]<UL><LI><a href="#[253cf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_opcode
<LI><a href="#[253cfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_errormsg
<LI><a href="#[253d004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_errorcode
<LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
</UL>

<P><STRONG><a name="[253d16c]"></a>tftp_decode_op</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftputils.o(i.tftp_decode_op))
<BR><BR>[Called By]<UL><LI><a href="#[253d0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_is_correct_ack
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[253d130]"></a>tftp_extract_block</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tftputils.o(i.tftp_extract_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tftp_extract_block &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[253d0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_is_correct_ack
<LI><a href="#[253d220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
</UL>

<P><STRONG><a name="[253d0f4]"></a>tftp_extract_filename</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tftputils.o(i.tftp_extract_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_extract_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[28d4dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[253d0b8]"></a>tftp_is_correct_ack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tftputils.o(i.tftp_is_correct_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tftp_is_correct_ack &rArr; tftp_extract_block &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[253d130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_block
<LI><a href="#[253d16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_decode_op
</UL>
<BR>[Called By]<UL><LI><a href="#[253d4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
</UL>

<P><STRONG><a name="[253d3c4]"></a>tftp_process_read</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tftpserver.o(i.tftp_process_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[253d25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
<LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[253d388]"></a>tftp_process_write</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tftpserver.o(i.tftp_process_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = tftp_process_write &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[253d34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
<LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[253d34c]"></a>tftp_send_ack_packet</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, tftpserver.o(i.tftp_send_ack_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tftp_send_ack_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253cf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_opcode
<LI><a href="#[253d07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_block
<LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[253d220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
</UL>

<P><STRONG><a name="[253d310]"></a>tftp_send_data_packet</STRONG> (Thumb, 76 bytes, Stack size 552 bytes, tftpserver.o(i.tftp_send_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253cf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_opcode
<LI><a href="#[253d040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_data_message
<LI><a href="#[253d07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_block
<LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[253d25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
</UL>

<P><STRONG><a name="[253d2d4]"></a>tftp_send_error_message</STRONG> (Thumb, 50 bytes, Stack size 544 bytes, tftpserver.o(i.tftp_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[253d400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTrm250ms
<LI><a href="#[253d220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[253d298]"></a>tftp_send_message</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tftpserver.o(i.tftp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b60e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[253d310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
<LI><a href="#[253d34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
</UL>

<P><STRONG><a name="[253d25c]"></a>tftp_send_next_block</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tftpserver.o(i.tftp_send_next_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b42e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[253d310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[253d4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
</UL>

<P><STRONG><a name="[253d07c]"></a>tftp_set_block</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tftputils.o(i.tftp_set_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_set_block
</UL>
<BR>[Calls]<UL><LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[253d310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
<LI><a href="#[253d34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
</UL>

<P><STRONG><a name="[253d040]"></a>tftp_set_data_message</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tftputils.o(i.tftp_set_data_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_set_data_message
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[253d310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
</UL>

<P><STRONG><a name="[253d004]"></a>tftp_set_errorcode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftputils.o(i.tftp_set_errorcode))
<BR><BR>[Called By]<UL><LI><a href="#[253d400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>

<P><STRONG><a name="[253cfc8]"></a>tftp_set_errormsg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tftputils.o(i.tftp_set_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_set_errormsg
</UL>
<BR>[Calls]<UL><LI><a href="#[28d4dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[253d400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>

<P><STRONG><a name="[253cf8c]"></a>tftp_set_opcode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftputils.o(i.tftp_set_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[253d310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
<LI><a href="#[253d34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
<LI><a href="#[253d400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>

<P><STRONG><a name="[17bd304]"></a>tftpd_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tftpserver.o(i.tftpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tftpd_init &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[17b6158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[17b6194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b6194]"></a>udp_bind</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[26b16e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[17bd304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_init
<LI><a href="#[17bd37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_init
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
<LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[17b67ac]"></a>udp_client_callback</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, client_tcpudp.o(i.udp_client_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = udp_client_callback &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b60e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.udp_client_callback_app)
</UL>
<P><STRONG><a name="[17b6770]"></a>udp_client_callback_app</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, client_tcpudp.o(i.udp_client_callback_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_client_callback_app &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[17b611c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[17b6158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[17b6194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
</UL>

<P><STRONG><a name="[253cf50]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[26b1454]"></a>udp_input</STRONG> (Thumb, 582 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[26b13a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[17b6158]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_new &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[28d53d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[17bd304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_init
<LI><a href="#[17bd37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_init
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[17b611c]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[17b6770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[17bd304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftpd_init
<LI><a href="#[17bd37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_init
<LI><a href="#[253d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[253d3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[253cf14]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[253d478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
<LI><a href="#[253d52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[17b60e0]"></a>udp_sendto</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b13dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26b9de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[17b3c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_recv
<LI><a href="#[17b67ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[17bd430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSendData
<LI><a href="#[253d298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
</UL>

<P><STRONG><a name="[26b13dc]"></a>udp_sendto_if</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[26b9e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2774774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[17b60e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[253d220]"></a>wrq_recv_callback</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tftpserver.o(i.wrq_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = wrq_recv_callback &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b42a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253d130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_block
<LI><a href="#[253d2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[253d34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
<LI><a href="#[253d43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(i.tftp_process_write)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[17b9128]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f107.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[17b7454]"></a>conn_err</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, client_tcpudp.o(i.conn_err))
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.Tcp_accept)
</UL>
<P><STRONG><a name="[17b3c8c]"></a>netbios_name_decoding</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, netbios.o(i.netbios_name_decoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netbios_name_decoding
</UL>
<BR>[Called By]<UL><LI><a href="#[17b3c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_recv
</UL>

<P><STRONG><a name="[17b3c50]"></a>netbios_recv</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, netbios.o(i.netbios_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netbios_recv &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b3c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbios_name_decoding
<LI><a href="#[17b60e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28d4f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netbios.o(i.netbios_init)
</UL>
<P><STRONG><a name="[277d234]"></a>ETH_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[17b8c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[27791fc]"></a>plug_holes</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[26b60f8]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[26b60bc]"></a>tcp_close_shutdown</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b548c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[26b54c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b584c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[26b5888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[26b6080]"></a>tcp_kill_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[26b6044]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[26b6008]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[17b6428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[26b48d4]"></a>tcp_listen_input</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b4898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[26b548c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b55b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[26b593c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[26b59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[26b5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[26b4898]"></a>tcp_parseopt</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[26b48d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[26b485c]"></a>tcp_process</STRONG> (Thumb, 1470 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[26b4820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[26b4898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[26b548c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[26b5888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[26b593c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[26b4820]"></a>tcp_receive</STRONG> (Thumb, 1790 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b4280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[26b55f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[277451c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b485c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[26b47e4]"></a>tcp_timewait_input</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[26b5504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[26b2bc4]"></a>tcp_create_segment</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b575c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[27745d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[26b55b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[26b2b88]"></a>tcp_output_alloc_header</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[26b5450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[26b557c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[26b2b4c]"></a>tcp_output_segment</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[26b593c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[26b9de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[277b308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[277b344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[26b2b10]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[26b2ad4]"></a>tcp_write_checks</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Called By]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[26b16e8]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[17b6194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[26b0b30]"></a>icmp_send_response</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[26b098c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[26b29a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b09c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[26b13a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[26afc6c]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26b0950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[26b098c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[26b4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[26acf6c]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[26acf30]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26acdc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[26aee20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[26acef4]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[26aceb8]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[277802c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26ace40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[26ace7c]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26ace04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2777ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[28d53d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[26ace40]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26aceb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[26b09c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26ace04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[26ace04]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[26ace40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[26ace7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[26aede4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[26acdc8]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26acf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[27b62a8]"></a>etharp_arp_input</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[27b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[27b626c]"></a>etharp_find_entry</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27b6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[27b6230]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[27b626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[27b61f4]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27764fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[27b617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[27b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[27b61b8]"></a>etharp_raw</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27764fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[27b617c]"></a>etharp_send_ip</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[27b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[27b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[27b61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[27b6140]"></a>etharp_update_arp_entry</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26b42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[27b617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[27b626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27b62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[27b4d54]"></a>low_level_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = low_level_init &rArr; ETH_DMATxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[277bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[277cd0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[277ce74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[277ceec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[27b4d18]"></a>low_level_input</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17bb1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[27b4cdc]"></a>low_level_output</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = low_level_output &rArr; ETH_TxPkt_ChainMode &rArr; Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[27b48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[27b491c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetCurrentTxBuffer
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[27b3e90]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[27b3e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[17b89e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[27b3e54]"></a>SetSysClockTo72</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[27b3e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[285de94]"></a>crc7</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, sd.o(i.crc7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc7
</UL>
<BR>[Called By]<UL><LI><a href="#[285d78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command_crc
</UL>

<P><STRONG><a name="[285c940]"></a>SPI_Config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sd_stm32.o(i.SPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17b8b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25caf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[25cb22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[285c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
</UL>

<P><STRONG><a name="[285c904]"></a>my_if_spiSend</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sd_stm32.o(i.my_if_spiSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[25caf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[25caf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[25cb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[285c79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
</UL>

<P><STRONG><a name="[285a780]"></a>http_accept</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, httpd.o(i.http_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = http_accept &rArr; http_state_alloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[17b6374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[26b56a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[26b56e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[26b5810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[26b59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[285a3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.httpd_init_addr)
</UL>
<P><STRONG><a name="[285a744]"></a>http_check_eof</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, httpd.o(i.http_check_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = http_check_eof &rArr; http_eof &rArr; http_close_conn &rArr; http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2859e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_bytes_left
<LI><a href="#[285a690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
</UL>

<P><STRONG><a name="[285a708]"></a>http_close_conn</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, httpd.o(i.http_close_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = http_close_conn &rArr; http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[285a4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[285a528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[285a690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_eof
</UL>

<P><STRONG><a name="[285a6cc]"></a>http_close_or_abort_conn</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, httpd.o(i.http_close_or_abort_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[17b6374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[26b56e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[26b5810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[26b59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[27764c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[285a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>
<BR>[Called By]<UL><LI><a href="#[285a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>

<P><STRONG><a name="[285a690]"></a>http_eof</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, httpd.o(i.http_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = http_eof &rArr; http_close_conn &rArr; http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[285a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
<LI><a href="#[285a744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_check_eof
</UL>

<P><STRONG><a name="[285a654]"></a>http_err</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, httpd.o(i.http_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = http_err &rArr; http_state_free &rArr; http_state_eof &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[285a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[285a618]"></a>http_find_file</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, httpd.o(i.http_find_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = http_find_file &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b4394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[285a5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
<LI><a href="#[285a5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_404_file
<LI><a href="#[28d517c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[285a5dc]"></a>http_get_404_file</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, httpd.o(i.http_get_404_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_get_404_file &rArr; fs_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2859e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[285a618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[285a5a0]"></a>http_init_file</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, httpd.o(i.http_init_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = http_init_file &rArr; strnstr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[285a294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
</UL>
<BR>[Called By]<UL><LI><a href="#[285a618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[285a564]"></a>http_parse_request</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, httpd.o(i.http_parse_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = http_parse_request &rArr; http_find_file &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27744e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2774684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2774738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[27747b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[285a294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[285a618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[28d4ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[285a4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[285a528]"></a>http_poll</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, httpd.o(i.http_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = http_poll &rArr; http_send &rArr; http_check_eof &rArr; http_eof &rArr; http_close_conn &rArr; http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
<LI><a href="#[285a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> httpd.o(i.http_close_or_abort_conn)
<LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[285a4ec]"></a>http_recv</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, httpd.o(i.http_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = http_recv &rArr; http_parse_request &rArr; http_find_file &rArr; file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
<LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[285a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[285a4b0]"></a>http_send</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, httpd.o(i.http_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = http_send &rArr; http_check_eof &rArr; http_eof &rArr; http_close_conn &rArr; http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2859e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_bytes_left
<LI><a href="#[285a474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data_nonssi
<LI><a href="#[285a690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_eof
<LI><a href="#[285a744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_check_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[285a438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[285a4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[285a528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[285a474]"></a>http_send_data_nonssi</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, httpd.o(i.http_send_data_nonssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = http_send_data_nonssi &rArr; http_write &rArr; file_read &rArr; file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[285a30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
</UL>
<BR>[Called By]<UL><LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
</UL>

<P><STRONG><a name="[285a438]"></a>http_sent</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, httpd.o(i.http_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = http_sent &rArr; http_send &rArr; http_check_eof &rArr; http_eof &rArr; http_close_conn &rArr; http_close_or_abort_conn &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[285a4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[285a3fc]"></a>http_state_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, httpd.o(i.http_state_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = http_state_alloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[285a348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[285a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[285a3c0]"></a>http_state_eof</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, httpd.o(i.http_state_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = http_state_eof &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2859e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[285a384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>

<P><STRONG><a name="[285a384]"></a>http_state_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(i.http_state_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = http_state_free &rArr; http_state_eof &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[285a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[285a654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_err
<LI><a href="#[285a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_or_abort_conn
</UL>

<P><STRONG><a name="[285a348]"></a>http_state_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, httpd.o(i.http_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = http_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28d53d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[285a3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_alloc
</UL>

<P><STRONG><a name="[285a30c]"></a>http_write</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, httpd.o(i.http_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = http_write &rArr; file_read &rArr; file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[17b42e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[253d1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[285a474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data_nonssi
</UL>

<P><STRONG><a name="[285a2d0]"></a>httpd_init_addr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, httpd.o(i.httpd_init_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = httpd_init_addr &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b62fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[17b6338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[17b6428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[17b6464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[26b56a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[26b59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[17bd3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[285a294]"></a>strnstr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, httpd.o(i.strnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strnstr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d4ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[285a564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[285a5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
</UL>

<P><STRONG><a name="[28d6838]"></a>smtp_base64_encode</STRONG> (Thumb, 240 bytes, Stack size 60 bytes, smtp.o(i.smtp_base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = smtp_base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[28d66d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_login_uname
<LI><a href="#[28d670c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_login_pass
</UL>

<P><STRONG><a name="[28d67fc]"></a>smtp_close</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, smtp.o(i.smtp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = smtp_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[26b59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[28d67c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28d63c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_recv
<LI><a href="#[28d6478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_connected
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d67c0]"></a>smtp_free</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, smtp.o(i.smtp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = smtp_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28d643c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_err
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d67fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_close
</UL>

<P><STRONG><a name="[28d6784]"></a>smtp_is_response</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smtp.o(i.smtp_is_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smtp_is_response &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2774684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[28cb348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d6748]"></a>smtp_is_response_finished</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, smtp.o(i.smtp_is_response_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = smtp_is_response_finished &rArr; pbuf_memfind &rArr; pbuf_memcmp &rArr; pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[2774558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[277460c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d670c]"></a>smtp_prepare_auth_login_pass</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, smtp.o(i.smtp_prepare_auth_login_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = smtp_prepare_auth_login_pass &rArr; smtp_base64_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28d6838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d66d0]"></a>smtp_prepare_auth_login_uname</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, smtp.o(i.smtp_prepare_auth_login_uname))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = smtp_prepare_auth_login_uname &rArr; smtp_base64_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28d6838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d6694]"></a>smtp_prepare_auth_or_mail</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, smtp.o(i.smtp_prepare_auth_or_mail))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = smtp_prepare_auth_or_mail &rArr; pbuf_strstr &rArr; pbuf_memfind &rArr; pbuf_memcmp &rArr; pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[27744a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[2774558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[2774684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[28d526c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28d65e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d6658]"></a>smtp_prepare_header</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, smtp.o(i.smtp_prepare_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtp_prepare_header
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d661c]"></a>smtp_prepare_helo</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, smtp.o(i.smtp_prepare_helo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smtp_prepare_helo
</UL>
<BR>[Calls]<UL><LI><a href="#[28d508c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d65e0]"></a>smtp_prepare_mail</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, smtp.o(i.smtp_prepare_mail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtp_prepare_mail
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
</UL>

<P><STRONG><a name="[28d65a4]"></a>smtp_prepare_quit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, smtp.o(i.smtp_prepare_quit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtp_prepare_quit
</UL>
<BR>[Calls]<UL><LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d6568]"></a>smtp_prepare_rcpt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, smtp.o(i.smtp_prepare_rcpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtp_prepare_rcpt
</UL>
<BR>[Calls]<UL><LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d652c]"></a>smtp_process</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, smtp.o(i.smtp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = smtp_process &rArr; smtp_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17b6554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26b59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[27744a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[27747b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[28d55f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28d64f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_body
<LI><a href="#[28d6568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_rcpt
<LI><a href="#[28d65a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_quit
<LI><a href="#[28d65e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_mail
<LI><a href="#[28d661c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_helo
<LI><a href="#[28d6658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_header
<LI><a href="#[28d6694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_or_mail
<LI><a href="#[28d66d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_login_uname
<LI><a href="#[28d670c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_prepare_auth_login_pass
<LI><a href="#[28d6748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_is_response_finished
<LI><a href="#[28d6784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_is_response
<LI><a href="#[28d67c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_free
<LI><a href="#[28d67fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[28d6388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_sent
<LI><a href="#[28d63c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_recv
<LI><a href="#[28d6400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_tcp_poll
</UL>

<P><STRONG><a name="[28d64f0]"></a>smtp_send_body</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, smtp.o(i.smtp_send_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = smtp_send_body &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b620c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>

<P><STRONG><a name="[28d64b4]"></a>smtp_send_mail_alloced</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, smtp.o(i.smtp_send_mail_alloced))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = smtp_send_mail_alloced &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[17b62fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[17b6374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[17b63b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[17b63ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[17b6428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[253d1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26adf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[26b56e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[26b5810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[26b59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[28d562c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28d634c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail
</UL>

<P><STRONG><a name="[28d6478]"></a>smtp_tcp_connected</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, smtp.o(i.smtp_tcp_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = smtp_tcp_connected &rArr; smtp_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[28d67fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtp.o(i.smtp_send_mail_alloced)
</UL>
<P><STRONG><a name="[28d643c]"></a>smtp_tcp_err</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smtp.o(i.smtp_tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = smtp_tcp_err &rArr; smtp_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[28d67c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtp.o(i.smtp_send_mail_alloced)
</UL>
<P><STRONG><a name="[28d6400]"></a>smtp_tcp_poll</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, smtp.o(i.smtp_tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = smtp_tcp_poll &rArr; smtp_process &rArr; smtp_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtp.o(i.smtp_send_mail_alloced)
</UL>
<P><STRONG><a name="[28d63c4]"></a>smtp_tcp_recv</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, smtp.o(i.smtp_tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = smtp_tcp_recv &rArr; smtp_process &rArr; smtp_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b6248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
<LI><a href="#[28d67fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtp.o(i.smtp_send_mail_alloced)
</UL>
<P><STRONG><a name="[28d6388]"></a>smtp_tcp_sent</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smtp.o(i.smtp_tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = smtp_tcp_sent &rArr; smtp_process &rArr; smtp_close &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[28d652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtp.o(i.smtp_send_mail_alloced)
</UL>
<P><STRONG><a name="[28d634c]"></a>smtp_verify</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, smtp.o(i.smtp_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtp_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[28d64b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_mail_alloced
</UL>

<P><STRONG><a name="[28cf1dc]"></a>_printf_core</STRONG> (Thumb, 764 bytes, Stack size 104 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28ca8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[28cf164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[28cf1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[28cee94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[28cf1a0]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28cf1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28cf164]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28cf1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28cf0ec]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[28cee94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
